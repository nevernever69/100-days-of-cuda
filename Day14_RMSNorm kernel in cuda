#include <iostream>
#include <cuda_runtime.h>
#include <cmath>

#define N 4   // Number of features
#define EPS 1e-5

__global__ void rmsNormKernel(float* d_input, float* d_output, float* d_gamma) {
    __shared__ float rms;

    int tid = threadIdx.x;
    
    // Step 1: Compute RMS
    float sum_sq = 0.0f;
    for (int i = 0; i < N; i++) {
        sum_sq += d_input[i] * d_input[i];
    }
    rms = sqrtf(sum_sq / N + EPS);
    
    // Step 2: Normalize + Scale
    d_output[tid] = d_gamma[tid] * (d_input[tid] / rms);
}

int main() {
    float h_input[N] = {1.0, 2.0, 3.0, 4.0};
    float h_output[N], h_gamma[N] = {1.0, 1.0, 1.0, 1.0};

    float *d_input, *d_output, *d_gamma;
    
    cudaMalloc(&d_input, N * sizeof(float));
    cudaMalloc(&d_output, N * sizeof(float));
    cudaMalloc(&d_gamma, N * sizeof(float));

    cudaMemcpy(d_input, h_input, N * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_gamma, h_gamma, N * sizeof(float), cudaMemcpyHostToDevice);
    
    rmsNormKernel<<<1, N>>>(d_input, d_output, d_gamma);
    cudaMemcpy(h_output, d_output, N * sizeof(float), cudaMemcpyDeviceToHost);

    // Print results
    std::cout << "RMSNorm Output:\n";
    for (int i = 0; i < N; i++) {
        std::cout << h_output[i] << " ";
    }
    std::cout << std::endl;

    cudaFree(d_input);
    cudaFree(d_output);
    cudaFree(d_gamma);
    
    return 0;
}